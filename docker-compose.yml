version: '3.8'

services:
  # Main API application
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://agri_user:agri_password@db:5432/agri_platform
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database with PostGIS
  db:
    image: postgis/postgis:15-3.3
    environment:
      - POSTGRES_DB=agri_platform
      - POSTGRES_USER=agri_user
      - POSTGRES_PASSWORD=agri_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agri_user -d agri_platform"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Background job processor (optional - implement later)
  # worker:
  #   build: .
  #   command: ["python", "-m", "india_agri_platform.worker"]
  #   environment:
  #     - DATABASE_URL=postgresql://agri_user:agri_password@db:5432/agri_platform
  #   depends_on:
  #     - db
  #     - redis
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    driver: bridge
